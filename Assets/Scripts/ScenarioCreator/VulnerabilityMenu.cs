using System;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Script to be put on the vulnerabilities menu, where vulnerabilities are added
/// </summary>


public class VulnerabilityMenu : MonoBehaviour
{
    [Header("Populating the vulnerability menu")]
    public TMP_Text componentName;
    public List<String> displayedVulnerabilities;
    private Dropdown availableVulnerabilitiesDropdown;
    private List<AttackTypes> availableVulnerabilities;

    [Header("Saving the selected vulnerability to the component")]
    private Canvas canvas;
    private SelectedObject selectedObject;
    private int currentDropdownValue;
    private AttackTypes currentVulnerabilityToSave;
    private List<AttackTypes> componentVulnerabilities;


    void Start()
    {
        canvas = GetComponentInParent<Canvas>();
        selectedObject = canvas.transform.Find("Scripts").GetComponent<SelectedObject>();

        availableVulnerabilitiesDropdown = GetComponentInChildren<Dropdown>();
        availableVulnerabilities = VulnerabilityLogic.GetAllAttacks();
        PopulateVulnerabilityDropdown(availableVulnerabilitiesDropdown, availableVulnerabilities);
        componentVulnerabilities = null;
    }


    private void PopulateVulnerabilityDropdown(Dropdown dropdown, List<AttackTypes> availableVulnerabilitiesList)
    {
        displayedVulnerabilities = new List<string>();

        foreach (var option in availableVulnerabilitiesList)
        {
            if (!selectedObject.selected.GetComponent<SystemComponent>().componentVulnerabilities.Contains(option))
                displayedVulnerabilities.Add(VulnerabilityLogic.GetAttackString(option));
        }

        if (dropdown != null)
        {
            dropdown.ClearOptions();
        }
        dropdown.AddOptions(displayedVulnerabilities);
    }


    public void PopulateVulnerabilityMenu(string name)
    {
        componentName = this.gameObject.transform.Find("ComponentNameText").GetComponent<TMP_Text>();
        componentName.text = name;
    }


    public void AddVulnerabilityToComponent()
    {
        if (availableVulnerabilitiesDropdown.options.Count > 0)
        {
            bool componentHasThisVulnerability = false;

            currentDropdownValue = availableVulnerabilitiesDropdown.value;
            currentVulnerabilityToSave = VulnerabilityLogic.GetAttackFromString(availableVulnerabilitiesDropdown.options[currentDropdownValue].text);
            componentVulnerabilities = selectedObject.selected.gameObject.GetComponent<SystemComponent>().componentVulnerabilities;
            foreach (var vunerability in componentVulnerabilities)
            {
                if (string.Equals(vunerability, currentVulnerabilityToSave))
                {
                    componentHasThisVulnerability = true;
                }
            }
            if (!componentHasThisVulnerability)
            {
                componentVulnerabilities.Add(currentVulnerabilityToSave);
            }
        }
        PopulateVulnerabilityDropdown(availableVulnerabilitiesDropdown, availableVulnerabilities);
    }


    public void DeleteAllComponentVulnerabilities()
    {
        selectedObject.selected.gameObject.GetComponent<SystemComponent>().componentVulnerabilities.Clear();
        PopulateVulnerabilityDropdown(availableVulnerabilitiesDropdown, availableVulnerabilities);
    }


    public void ExitVulnerabilityMenu()
    {
        this.gameObject.SetActive(false);
    }

    public void OnButtonPress()
    {
        canvas = GetComponentInParent<Canvas>();
        selectedObject = canvas.transform.Find("Scripts").GetComponent<SelectedObject>();

        availableVulnerabilitiesDropdown = GetComponentInChildren<Dropdown>();
        availableVulnerabilities = VulnerabilityLogic.GetAllAttacks();
        PopulateVulnerabilityDropdown(availableVulnerabilitiesDropdown, availableVulnerabilities);
    }
}
