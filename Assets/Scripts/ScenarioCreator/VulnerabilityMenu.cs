using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Script to be put on the vulnerabilities menu, where vulnerabilities are added
/// </summary>
public class VulnerabilityMenu : MonoBehaviour
{
    [Header("Vulnerability variables")]
    private List<AttackTypes> componentVulnerabilities;
    private List<AttackTypes> availableVulnerabilities;

    private List<GameObject> availableVulnerabiltyObjects = new List<GameObject>();
    private List<GameObject> addedVulnerabilityObjects = new List<GameObject>();

    [Header("Objects variables")]
    public SelectedObject selectedObject;

    public GameObject availableScrollArea;
    public GameObject addedScrollArea;

    public ScrollRect availableScrollRect;
    public ScrollRect addedScrollRect;

    public GameObject vulnerabilityPrefab;

    private Button selected = null;

    private void OnEnable()
    {
        availableVulnerabilities = VulnerabilityLogic.GetAllAttacks();
        componentVulnerabilities = selectedObject.selected.GetComponent<SystemComponent>().componentVulnerabilities;

        Canvas.ForceUpdateCanvases();

        availableScrollRect.verticalNormalizedPosition = 1;
        addedScrollRect.verticalNormalizedPosition = 1;

        PopulateAvailableList();
        PopulateAddedList();
    }

    private void OnDisable()
    {
        foreach (var go in availableVulnerabiltyObjects)
            Destroy(go);

        foreach (var go in addedVulnerabilityObjects)
            Destroy(go);

        availableVulnerabiltyObjects.Clear();
        addedVulnerabilityObjects.Clear();
    }
    
    public void PopulateAvailableList()
    {
        foreach (var attack in VulnerabilityLogic.GetAllAttacks())
        {
            if (componentVulnerabilities.Contains(attack))
                continue;

            GameObject go = Instantiate(vulnerabilityPrefab, availableScrollArea.transform);

            availableVulnerabiltyObjects.Add(go);

            go.GetComponentInChildren<Text>().text = VulnerabilityLogic.GetAttackString(attack);
            go.GetComponent<Button>().onClick.AddListener(() => SelectVulnerability(go.GetComponent<Button>()));
        }
    }

    public void PopulateAddedList()
    {
        foreach (var attack in componentVulnerabilities)
        {
            GameObject go = Instantiate(vulnerabilityPrefab, addedScrollArea.transform);

            addedVulnerabilityObjects.Add(go);

            go.GetComponentInChildren<Text>().text = VulnerabilityLogic.GetAttackString(attack);
            go.GetComponent<Button>().onClick.AddListener(() => SelectVulnerability(go.GetComponent<Button>()));
        }
    }

    public void SelectVulnerability(Button btn)
    {
        if (selected != null)
        {
            ColorBlock selectedClr = selected.colors;
            selectedClr.normalColor = Color.white;
            selected.colors = selectedClr;

            selected.enabled = false;
            selected.enabled = true;
        }

        selected = btn;
        ColorBlock clr = selected.colors;
        clr.normalColor = new Color(1f, 0.5f, 0f);
        selected.colors = clr;

        selected.enabled = false;
        selected.enabled = true;
    }
    
    public void AddVulnerabilityToComponent()
    {
        AttackTypes attack = VulnerabilityLogic.GetAttackFromString(selected.GetComponentInChildren<Text>().text);

        componentVulnerabilities.Add(attack);
        selectedObject.selected.GetComponent<SystemComponent>().componentVulnerabilities = componentVulnerabilities;

        FindObjectOfType<InformationColumn>().ClearInformationColumn();
        FindObjectOfType<InformationColumn>().PopulateInformationColumn(selectedObject.selected.GetComponent<SystemComponent>());

        selected.transform.parent = addedScrollArea.transform;
    }
    public void RemoveVulnerabilityFromComponent()
    {
        AttackTypes attack = VulnerabilityLogic.GetAttackFromString(selected.GetComponentInChildren<Text>().text);

        componentVulnerabilities.Remove(attack);
        selectedObject.selected.GetComponent<SystemComponent>().componentVulnerabilities = componentVulnerabilities;
        
        FindObjectOfType<InformationColumn>().ClearInformationColumn();
        FindObjectOfType<InformationColumn>().PopulateInformationColumn(selectedObject.selected.GetComponent<SystemComponent>());

        selected.transform.parent = availableScrollArea.transform;
    }
    
    public void ExitVulnerabilityMenu()
    {
        this.gameObject.SetActive(false);
    }
}
