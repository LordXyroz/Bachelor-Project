using System.Collections.Generic;
using System.Linq;

/// <summary>
/// Static class for holding which attack is stopped by which defense.
/// Uses Dictionary with a list to create a one-to-many relationship
/// </summary>

public static class VulnerabilityPairings
{
    private static Dictionary<AttackTypes, List<DefenseTypes>> _vulnerabilityPairs;

    /// <summary>
    /// Static constructor for setting up default values of the dictionary
    /// AttackTypes is the key, List of DefenseTypes is the value
    /// </summary>
    static VulnerabilityPairings()
    {
        _vulnerabilityPairs = new Dictionary<AttackTypes, List<DefenseTypes>>
        {
            { AttackTypes.Injection,             new List<DefenseTypes> { DefenseTypes.Sanitize_Input } },
            { AttackTypes.Credential_Stuffing,   new List<DefenseTypes> { DefenseTypes.Two_Factor_Auth } },
            { AttackTypes.Package_Sniffing,      new List<DefenseTypes> { DefenseTypes.Firewall } },
            { AttackTypes.Hostile_XML,           new List<DefenseTypes> { DefenseTypes.Sanitize_Input, DefenseTypes.Firewall } },
            { AttackTypes.Bypass_Access_Control, new List<DefenseTypes> { DefenseTypes.Log_Failure} }
        };
    }

    /// <summary>
    /// Checks whether the attack is stopped by the defense.
    /// Throws an exception if the dictionary doesn't contain the attack.
    /// </summary>
    /// <param name="attack">Type of attack</param>
    /// <param name="defense">Type of defense</param>
    /// <returns>True if the defense stops the attack, else false</returns>
    public static bool IsStoppedBy(AttackTypes attack, DefenseTypes defense)
    {
        if (!_vulnerabilityPairs.ContainsKey(attack))
            throw new System.Exception("Attack doesn't exist in this context!");
        return _vulnerabilityPairs[attack].Contains(defense);
    }
}

