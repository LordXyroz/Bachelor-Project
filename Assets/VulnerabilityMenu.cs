using System;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Script to be put on the vulnerabilities menu, where vulnerabilities are added
/// </summary>


public class VulnerabilityMenu : MonoBehaviour
{
    [Header("Populating the vulnerability menu")]
    public TMP_Text componentName;
    public List<String> displayedVulnerabilities;
    private Dropdown availableVulnerabilitiesDropdown;
    private List<string> availableVulnerabilities;

    [Header("Saving the selected vulnerability to the component")]
    private Canvas canvas;
    private SelectedObject selectedObject;
    private int currentDropdownValue;
    private string currentVulnerabilityToSave;


    // Start is called before the first frame update
    void Start()
    {
        //componentName = this.gameObject.transform.Find("ComponentNameText").GetComponent<TMP_Text>();
        //componentName.text = "";
        canvas = GetComponentInParent<Canvas>();
        selectedObject = canvas.transform.Find("Scripts").GetComponent<SelectedObject>();

        availableVulnerabilitiesDropdown = GetComponentInChildren<Dropdown>();
        availableVulnerabilities = new List<string>();
        availableVulnerabilities.Add("Saved vulnerability 1");
        availableVulnerabilities.Add("Saved vulnerability 2");
        availableVulnerabilities.Add("Saved vulnerability 3");
        availableVulnerabilities.Add("Saved vulnerability 4");
        PopulateVulnerabilityDropdown(availableVulnerabilitiesDropdown, availableVulnerabilities);
    }


    private void PopulateVulnerabilityDropdown(Dropdown dropdown, List<string> availableVulnerabilitiesList)
    {
        displayedVulnerabilities = new List<string>();
        foreach (string option in availableVulnerabilitiesList)
        {
            displayedVulnerabilities.Add(option);
        }

        if (dropdown != null)
        {
            dropdown.ClearOptions();
        }
        dropdown.AddOptions(displayedVulnerabilities);
    }


    public void PopulateVulnerabilityMenu(string name/*, List<string> vulnerabilities*/)
    {
        componentName = this.gameObject.transform.Find("ComponentNameText").GetComponent<TMP_Text>();
        componentName.text = name;
    }

    public void AddVulnerabilityToComponent()
    {
        currentDropdownValue = availableVulnerabilitiesDropdown.value;
        currentVulnerabilityToSave = availableVulnerabilitiesDropdown.options[currentDropdownValue].text;
        //Change the onscreen Text to reflect the current Dropdown selection
        //m_Text.text = currentVulnerabilityToSave;
        Debug.Log("Saving the vulnerability: " + currentVulnerabilityToSave + " to the Component: " + componentName.text);
        selectedObject.selected.gameObject.GetComponent<SystemComponent>().componentVulnerabilities.Add(currentVulnerabilityToSave);
    }


    public void DeleteAllComponentVulnerabilities()
    {
        selectedObject.selected.gameObject.GetComponent<SystemComponent>().componentVulnerabilities.Clear();
    }

    public void ExitVulnerabilityMenu()
    {
        this.gameObject.SetActive(false);
    }
}
